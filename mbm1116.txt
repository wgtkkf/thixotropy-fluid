!**************************************************
!*                                                *
!*    2-Dimensional Thixotropic Flow Simulator    *
!*                                                *
!*    F.Bautista Model                            *
!*    Finite Element Method                       *
!*    Triangular Linear Mesh                      *
!*    Velocity Correction Method                  *
!*    SUPG Version                                *
!*    Runge-Kutta method (2nd order)              *
!*                                                *
!*    non-dimensional form                        *
!*                                                *
!*    Coded by Takuro TOKUNAGA, Nov,16,2010       *
!*                                                *
!**************************************************

!*********************************
!*  Main Routine                 *
!*  Last Modified : NOV 2,2010   *
!*********************************


!*     use portlib

!*     [CAUTION]
!*        The statement "use portlib" is for Compaq (Visual) 
!*        Fortran. If your system works on UNIX, remove this 
!*        statement.

module parameters

implicit none

	  integer,PARAMETER :: COUNT=100
	  integer,PARAMETER :: EMAX=5000,NMAX=5000
      integer,PARAMETER :: BCMAX1=500,BCMAX2=500,BCMAX3=200
      integer,PARAMETER :: BCMAX4=500,BCMAX5=500,BCMAX6=500
	  integer,PARAMETER :: FNu=10

	  !have to reconsider the numbers
	  integer,PARAMETER :: BCMAXN=50
	  integer NE,NP

	  !used for subroutine output_all
	  integer :: NF=0,FEM=2,COUNT2 
	  double precision  NOP(EMAX,3),CORD(NMAX,2)
	  double precision  RE,TY

	!********************
	!* Model parameters *
	!********************
	  
	  double precision G0
	  double precision lambda
	  double precision DENS
	  
      double precision  EHX(EMAX,3,3),EHY(EMAX,3,3)	  !/MTR1/
      double precision  EKX(EMAX,3,3,3),EKY(EMAX,3,3,3)   !/MTR2/
      double precision  EMM(EMAX,3)			  !/MTR3/
      double precision  ESS(EMAX,3,3)			  !/MTR4/
      double precision  LMM(NMAX),ILMM(NMAX)		  !/MTR5/
      double precision  EB(EMAX,3),EC(EMAX,3),AR(EMAX)	  !/MTR6/
      double precision  EB1(EMAX,3),EC1(EMAX,3) 	  !/MTR7/
      double precision  VX0(NMAX),VY0(NMAX)		  !/V0/
      double precision  VX1(NMAX),VY1(NMAX)		  !/V1/
      double precision  PR0(NMAX),PR1(NMAX)		  !/PR/
      double precision  TXX0(NMAX),TXY0(NMAX),TYY0(NMAX)
      double precision  TXX1(NMAX),TXY1(NMAX),TYY1(NMAX)
      double precision  VVX(NMAX),VVY(NMAX)		  !/VEC1/
      double precision  VTXX(NMAX),VTXY(NMAX),VTYY(NMAX)
      double precision  VBC1(BCMAX1),NBC1,NNBC1(BCMAX1)   !/BC1/
      double precision  VBC2(BCMAX2),NBC2,NNBC2(BCMAX2)   !/BC2/
      double precision  VBC3(BCMAX3),NBC3,NNBC3(BCMAX3)   !/BC3/ 
      double precision  VBC4(BCMAX4),NBC4,NNBC4(BCMAX4)   !/BC4 ABOUT FLUIDITIY/
      double precision  VBC5(BCMAX5),NBC5,NNBC5(BCMAX5)   !/BC5 ABOUT FLUIDITIY/
      double precision  VBC6(BCMAX6),NBC6,NNBC6(BCMAX6)   !/BC6 ABOUT FLUIDITIY/
      double precision  VBCN(BCMAXN),NBCN,NNBCN(BCMAXN,2) !/BCN/
	  double precision  VBCF(BCMAX4),NBCF,NNBCF(BCMAX4)
	        	  
  	  
	  double precision  XX(NMAX)			  !/DP/
	  
	  !* MODEL PARAMETERS *
	  DOUBLE PRECISION  F0,F1
	  DOUBLE PRECISION  PHI(EMAX)
	  DOUBLE PRECISION  PHI0(NMAX),PHI1(NMAX)
	  DOUBLE PRECISION  VPHI(NMAX)
	  DOUBLE PRECISION  K0
	  double precision  INTVAL                        !the interval to output data
    
	  
	


end module parameters


      PROGRAM MAIN
      use parameters
!*
      IMPLICIT NONE
!*
!*     [CAUTION]
!*        The option "NONE" is available in Fortran 90, so you
!*        have to comment out this line  if you want to use  a
!*        FORTRAN 77 compiler.

!*	   [postscript]
!*        this program is rewrited to f90


       INTEGER I								
	   integer NCOUNT							
       DOUBLE PRECISION TIME
       DOUBLE PRECISION STD,RES,TEND,DT,VMEAN
       CHARACTER FNAME*5,ONAME*20,CMNT*25
	   
       REAL time0,time1,cpu,cpu0,cpu1,dtime

       dimension time0(2),time1(2)

!* File Open *
	  OPEN(UNIT=FNu, file='fem.dat', status='replace', action='write', position='rewind')


!*  Title Page  *
      CALL TITLE

      STD=1.0D-08

!*  Model Parameters for PTT Model  *
      CALL INPUT1

!*  Mesh Data  *
      CALL INPUT2(DT)

!*  Initial Data  *
      CALL INPUT3(TIME,NP)

!*  Boundary Conditions  *
      CALL INPUT4(VMEAN)

      WRITE(*,*) ' Enter Final Time: '
      READ(5,*) TEND

!*    WRITE(*,*) ' Enter Output Data File Name: '
!*	  READ(5,*) ONAME

!***************************
!* Modified here 10/11/11  *
!* ADDED 10/10/20          *
!***************************

	  WRITE(*,*) ' Enter Output Data File Name: ' 
	  WRITE(*,*) ' (uo to 5 characters)          : '
	  READ(5,*) FNAME

	  DO I=1,5
	  IF(FNAME(I:I).EQ.' ') THEN
		FNAME(I:I)='0'
		END IF
		END DO

	  WRITE(*,*) ' Enter Output Interval (step): '
	  read(5,*) INTVAL

      WRITE(*,*) ' Enter Comment within 25 Letters: '
      READ(5,*) CMNT
	  
	  


!*  Information  *
      CALL INFO(NE,NP,DT,TIME,TEND,ONAME,CMNT)

!*  Beginning of Measurement of CPU Time
      cpu0=dtime(time0)

!*  Calculate Element Matrices  *
      DO 10 I=1,NP
        LMM(I) = 0.D0
   10 CONTINUE

      DO 20 I=1,NE
        CALL MKMTR(I)
   20 CONTINUE

!*  Inverse Matrix of LMM
      DO 30 I=1,NP
        ILMM(I) = 1.D0 / LMM(I)
   30 CONTINUE

!*  Time Loop Begins  *

      NCOUNT = 0
	  COUNT2 = 0

  999 TIME = TIME + DT
      NCOUNT = NCOUNT + 1
	  COUNT2 = COUNT2 + 1

      IF (NCOUNT.EQ.COUNT) THEN
        WRITE(*,*) TIME,RES
        NCOUNT = 0
      ENDIF

!***** STEP 1a/1b *****
      CALL STEP1(DT)

!***** STEP 2 *****
      CALL STEP2(DT)

!***** STEP 3 *****
      CALL STEP3(DT)

!*  Convergence Check  *
      CALL CONV(RES,NP,VMEAN)


!***** OUTPUT *****
!***** EXCHANGE THIS PART DEPENDING ON OUTPUT CONDITION *************

!*   IF ((TIME.LT.TEND).AND.(RES.GT.STD)) THEN
  !* IF (TIME.LT.TEND) THEN

	!*  Update Calculated Data  *
!*          CALL UPDATE(NP)
!*          GOTO 999
!*        ELSE

	!* Output Results (Output the final state) *
!*          CALL OUTPUT(ONAME,CMNT,NP,TIME)
!*        END IF

!*       WRITE(*,*) 'All Done'

!********************************************************************


!***** OUTPUT PER STEP*****
!***** EXCHANGE THIS PART DEPENDING ON OUTPUT CONDITION *************

		!*IF ((TIME.LT.TEND).AND.(RES.GT.STD)) THEN
       IF (TIME.LT.TEND) THEN

!*		Update Calculated Data Per Step (added 10/10/27)
  		CALL UPDATE_STEP(NE,NP)

  		if (COUNT2.EQ.INTVAL) THEN
 			NF=NF+1
  			COUNT2=0
			
  			call output_all(FNAME,CMNT,NE,NP,TIME,NF)
			call OUTPUT_FEM(NP,NE,FEM,TIME)

			FEM=FEM+1
  		END IF

  			GOTO 999
  		ELSE

!*  Output Results (Output interval states)
  		call output_all(FNAME,CMNT,NE,NP,TIME,NF)
		call OUTPUT_FEM(NP,NE,FEM,TIME)
		

  		END IF

	

!*********************************************************************


!*  Output CPU Time  *
      cpu1= dtime(time1)
      cpu = cpu1
      write(*,*) 'CPU Time: ',cpu,' [s]'

	  write(*,*) 'ALL DONE'

	  close(FNu)

      STOP
      END 


!*****************************************
!*  Rewrite time loop (not use goto)     *
!*  Last Modified : OCT 10,2010          *
!*****************************************
! matigatterukamo sirenai



!*********************************
!*  Display Title Page           *
!*  Last Modified : OCT 10,2010  *
!*********************************

      SUBROUTINE TITLE

      WRITE(*,*) '***************************************************'
      WRITE(*,*) '*                                                 *'
      WRITE(*,*) '*  2-Dimensional Thixotropy Flow Simulator        *'
	  WRITE(*,*) '*	 F.Bautista Model			    *'
      WRITE(*,*) '*                                                 *'
      WRITE(*,*) '*  Source : source.f90                            *'
      WRITE(*,*) '*  Version: 1.00 (Nov, 2010)                      *'
      WRITE(*,*) '*                                                 *'
      WRITE(*,*) '*  Coded by                                       *'
      WRITE(*,*) '*     Takuro TOKUNAGA,      ###########           *'
      WRITE(*,*) '*     Yamamoto Laboratory,          ###           *'
      WRITE(*,*) '*     Osaka University              ###           *'
      WRITE(*,*) '*                                                 *'
      WRITE(*,*) '***************************************************'

      RETURN
      END


!*********************************
!*  Input Model Parameter        *
!*  Last Modified : AUG 13,2000  *
!*********************************

!*********************************
!*  have to rewrite here         *
!*  Last Modified : OCT 28,2010  *
!*********************************




     SUBROUTINE INPUT1
      USE PARAMETERS
      IMPLICIT NONE   

      WRITE(*,100)
  100 FORMAT('* Enter Parameter:'/)

	  WRITE(*,*) ' FLUIDITY ZERO S-R: '
      READ(*,*) F0

      WRITE(*,*) ' FLUIDITY HIGH S-R: '
      READ(*,*) F1
	  
      WRITE(*,*) ' RELAXATION MODULUS: '
      READ(*,*) G0

	  WRITE(*,*) ' STRUCTURAL RELAXATION TIME: '
      READ(*,*) lambda

      WRITE(*,*) ' KINETIC CONSTANT: '
      READ(*,*) K0

	  WRITE(*,*) ' DENSITY:'
	  READ(*,*) DENS

      RETURN

      STOP
      END


!*********************************
!*  Input Element Information    *
!*  Last Modified : AUG 9,1999   *
!*********************************

      SUBROUTINE INPUT2(DT) 
     
	  use parameters 
      IMPLICIT NONE

      INTEGER I,N 
      DOUBLE PRECISION DT 
      CHARACTER CMNT*25,MNAME*20

      WRITE(*,100)
      WRITE(*,110)
  100 FORMAT(/'[ Mesh Data ]')
  110 FORMAT('* Enter Mesh File Name:'/)

      READ(5,*) MNAME

      OPEN(UNIT=15, ERR=90, FILE=MNAME, STATUS='OLD')

      READ(15,'(A25)') CMNT
      WRITE(*,120) CMNT
  120 FORMAT('>>>> Comment: ',A)

      READ(15,*) NP
      READ(15,*) NE
      READ(15,*) DT

!*      dt=dt*0.5d-01

      READ(15,'(A80)')
      READ(15,*) (N,CORD(N,1),CORD(N,2),I=1,NP)
      READ(15,'(A80)')

      READ(15,*) (N,NOP(N,1),NOP(N,2),NOP(N,3),I=1,NE)

!*  100 FORMAT(I4,2E15.7/)
!*  110 FORMAT(4I4/)

      CLOSE(15)
      RETURN

   90 WRITE(*,130) MNAME
  130 FORMAT(/'>>>>>> Error (1): Cannot find ',A/)

      STOP
      END

!*********************************
!*  Input Initial Conditions     *
!*  Last Modified : OCT 29,2010  *
!*********************************

      SUBROUTINE INPUT3(TIME,NPSUB)
      
      use parameters 

IMPLICIT NONE
      INTEGER I,N,NPSUB      

      DOUBLE PRECISION TIME
      CHARACTER CMNT*25,INAME*20

      WRITE(*,100)
      WRITE(*,110)
  100 FORMAT(/'[ Initial Data ]')
  110 FORMAT('* Enter Initial Data File Name:'/)

      READ(5,*) INAME

      IF ((INAME.EQ.'REST').OR.(INAME.EQ.'rest')) THEN

!*       When Fluid is at Rest at Initial Time

        WRITE(*,120) 'Fluid is at rest.'
        TIME = 0.D0

        DO 10 I=1,NPSUB
           VX0(I) = 0.D0
           VY0(I) = 0.D0
           PR0(I) = 0.D0
           VX1(I) = 0.D0
           VY1(I) = 0.D0
           PR1(I) = 0.D0
		  TXX0(I) = 0.D0
		  TXY0(I) = 0.D0
		  TYY0(I) = 0.D0
		  TXX1(I) = 0.D0
		  TYY1(I) = 0.D0
		  PHI0(I) = F0
		  PHI1(I) = F1		   
   10   CONTINUE

!******************
!* 10/10/29       *
!* PROBABLY WRONG *
!******************
		DO I=1,NE
			phi(i)=0
			END DO

      ELSE

        OPEN(UNIT=20, ERR=90, FILE=INAME, STATUS='OLD')

!*  Initial Time  *

        READ(20,'(A25)') CMNT
        WRITE(*,120) CMNT
  120   FORMAT('>>>> Comment: ',A)

        READ(20,*) TIME

!*  Initial Data for U,V,P  *
        READ(20,'(A80)')
        READ(20,*) (N,VX0(N),VY0(N),PR0(N),I=1,NP)

        DO 20 I=1,NPSUB
           VX1(I) =  VX0(I)
           VY1(I) =  VY0(I)
           PR1(I) =  PR0(I)
		  TXX1(I) = TXX0(I)
		  TXY1(I) = TXY0(I)
		  TYY1(I) = TYY0(I)
		  PHI1(I) = PHI0(I)
   20   CONTINUE


      ENDIF

!C  200 FORMAT(I5,3E15.7)

      CLOSE(20)
      RETURN

   90 WRITE(*,130) INAME
  130 FORMAT(/'>>>>>> Error (1): Cannot find ',A/)

      STOP
      END


!*********************************
!*  Input Boundary Conditions    *
!*  Last Modified : AUG 05,2000  *
!*********************************

      SUBROUTINE INPUT4(VMEAN)
     

      use parameters 
 IMPLICIT NONE
      INTEGER I,M,N,N1,N2 
      DOUBLE PRECISION LL,X1,X2,Y1,Y2,VMEAN,PG


      CHARACTER CMNT*25,BCNAME*20



!*     **************************
!*     *  NBC# : Number of B.C  *
!*     *  NNBC#: Node Number    *
!*     *  VBC# : Value          *
!*     *                        *
!*     *  # | 1 | 2 | 3 |       *
!*     * ---+---+---+---+       *
!*     * var| u | v | p |       *
!*     *                        *
!*     ***************************

      WRITE(*,100)
      WRITE(*,110)
  100 FORMAT(/'[ Boundary Condition ]')
  110 FORMAT('* Enter B.C. File Name:'/)

      READ(5,*) BCNAME

      OPEN(UNIT=25, ERR=90, FILE=BCNAME, STATUS='OLD')

      READ(25,'(A25)') CMNT
      WRITE(*,120) CMNT
  120 FORMAT('>>>> Comment: ',A)

      READ(25,*) NBC1
	  READ(25,*) NBC2
	  READ(25,*) NBC3
	  READ(25,*) NBC4
	  READ(25,*) NBC5 
	  READ(25,*) NBC6
	  READ(25,*) NBCN
	  READ(25,*) NBCF
	  READ(25,*) VMEAN
	      

!*  B.C. DATA FOR U  *
      READ(25,'(A80)')
      READ(25,*) (NNBC1(N),VBC1(N),N=1,NBC1)

!*  B.C. DATA FOR V  *
      READ(25,'(A80)')
      READ(25,*) (NNBC2(N),VBC2(N),N=1,NBC2)

!*  B.C. DATA FOR P  *
      READ(25,'(A80)')
      READ(25,*) (NNBC3(N),VBC3(N),N=1,NBC3)

!*  NATURAL B.C.  *
      READ(25,'(A80)')
      DO 10 I=1,NBCN
        READ(25,*) N,M,PG

        IF (M.EQ.1) THEN
          N1 = NOP(N,2)
          N2 = NOP(N,3)

        ELSE IF (M.EQ.2) THEN
          N1 = NOP(N,1)
          N2 = NOP(N,3)

        ELSE IF (M.EQ.3) THEN
          N1 = NOP(N,1)
          N2 = NOP(N,2)

        ENDIF

        NNBCN(I,1) = N1
        NNBCN(I,2) = N2

        X1 = CORD(N1,1)
        Y1 = CORD(N1,2)
        X2 = CORD(N2,1)
        Y2 = CORD(N2,2)

        LL = SQRT( (X1-X2)**2 + (Y1-Y2)**2 )
        VBCN(I) = PG*LL

   10 CONTINUE

	!*  B.C. Data for Txx  *
        READ(25,'(A80)')
        READ(25,*) (NNBC4(N),VBC4(N),N=1,NBC4)

	!*  B.C. Data for Txy  *
        READ(25,'(A80)')
        READ(25,*) (NNBC5(N),VBC5(N),N=1,NBC5)

	!*  B.C. Data for Tyy  *
        READ(25,'(A80)')
        READ(25,*) (NNBC6(N),VBC6(N),N=1,NBC6)

	!*  B.C. Data for Phi  *
        READ(25,'(A80)')
        READ(25,*) (NNBCF(N),VBCF(N),N=1,NBCF)

	!*  100 FORMAT(2I5,E15.7E2)


      CLOSE(25)
      RETURN

   90 WRITE(*,130) BCNAME
  130 FORMAT(/,'>>>>>> Error (1): Cannot find ',A/)

      STOP
      END


!*********************************
!*  Output Results               *
!*  Last Modified : JUL 13,1999  *
!*********************************

      SUBROUTINE OUTPUT(ONAME,CMNT,NPSB,TIME) !REWRITE NP TO NPSB
     

      use parameters 

 IMPLICIT NONE
      INTEGER N ,NPSB
      DOUBLE PRECISION TIME
      CHARACTER ONAME*20,CMNT*25

      

      OPEN(UNIT=30, FILE=ONAME, STATUS='UNKNOWN')

!*  Comment, Time
        WRITE(30,*) CMNT
        WRITE(30,*) TIME

!*  Data for U,V,P
        WRITE(30,110)
        WRITE(30,200) (N,VX1(N),VY1(N),PR1(N),N=1,NP)

  100 FORMAT(E15.7/)
  110 FORMAT(' ',' NODE    Vx  [m/s]      Vy  [m/s]       p  [Pa]')
  200 FORMAT(' ',I5,3E15.7E2)

      CLOSE(30)

      RETURN
      END


!*************************************
!*  Output Results per interval      *
!*  Last Modified : OCT 20,2010      *
!*************************************

	subroutine output_all(FNAME,CMNT,NESB,NPSB,TIME,NFSB)
	use parameters

	IMPLICIT NONE
      INTEGER N ,NESB,NPSB
      DOUBLE PRECISION TIME
	  integer l1,l2,l3,NFSB
      CHARACTER FNAME*5,ONAME*20,CMNT*25
      


	!Update File Name
		l1=NFSB/100
		l2=(NFSB-100*l1)/10
		l3=NFSB-100*l1-10*l2
	!Making File Name
		ONAME=FNAME//CHAR(48+l1)//CHAR(48+l2)//CHAR(48+l3)//'.dat' 
	
	!Open File
      OPEN(UNIT=30, FILE=ONAME, STATUS='UNKNOWN')

!*  Comment, Time
        WRITE(30,*) CMNT
        WRITE(30,*) TIME

!*  Data for U,V,P
        WRITE(30,110)
        WRITE(30,200) (N,VX1(N),VY1(N),PR1(N),N=1,NP)

!*  Data for Tij
        WRITE(30,120)
        WRITE(30,200) (N,TXX1(N),TXY1(N),TYY1(N),N=1,NP)


!*  Data for phi
        WRITE(30,130)
        WRITE(30,210) (N,PHI1(N),N=1,NE)

		100 FORMAT(E15.7/)
		110 FORMAT(' ',' NODE    Vx  [m/s]      Vy  [m/s]       p  [Pa]')
		120 FORMAT(' ',' NODE    Txx  [Pa]      Txy  [Pa]       Tyy  [Pa]')
		130 FORMAT(' ',' NODE    phi  [1/Pa/s]')
		200 FORMAT(' ',I5,3E15.7E2)
		210 FORMAT(' ',I5,E15.7E2)

		CLOSE(30)

		RETURN
		END

		
!*************************************
!*  Output Results                   *
!*  For Micro AVS FEM                *
!*  Last Modified : NOV 16,2010      *
!*************************************
  SUBROUTINE OUTPUT_FEM(NPSB,NESB,FEMCOUNT,TIME)
  
  use parameters 

 IMPLICIT NONE
      INTEGER N,NPSB,NESB,FEMCOUNT
	  INTEGER :: X=0,Y=1,Z=2
	  
	  INTEGER :: COUNTER=1
	  DOUBLE PRECISION TIME
      
!* WRITE OUTPUT DATA FILE *
	IF(COUNTER==1) THEN
		
		WRITE(FNu,110)
		WRITE(FNu,115) 
		WRITE(FNu,120) 
		WRITE(FNu,130) 'step',COUNTER
		WRITE(FNu,140) NPSB,NESB
		WRITE(FNu,150) (N,CORD(N,1),CORD(N,2),0.d0,N=1,NPSB)
		WRITE(FNu,160) (N,0,'tri',NOP(N,1),NOP(N,2),NOP(N,3),N=1,NESB)
		WRITE(FNu,170) Z,X
		WRITE(FNu,180) Z,Y,Y
		WRITE(FNu,185) 'VX'
		WRITE(FNu,190) 'VY'
		WRITE(FNu,195) (N,VX1(N),VY1(N),N=1,NPSB)



		110 FORMAT('# mbm data')
		115 FORMAT('WRITE HERE TOTAL STEP')
		120 FORMAT('data')
		130 FORMAT(A4,I0)
		140 FORMAT(I0,1x,I4)
		150 FORMAT(I0,3E14.7E2)
		160 FORMAT(I0,1X,I1,1X,A3,3E14.7E2)
		170 FORMAT(I0,I2)
		180 FORMAT(I0,I2,I2)
		185 FORMAT(A2)
		190 FORMAT(A2)
		195 FORMAT(I0,2E14.7E2)

		COUNTER=COUNTER+1

		ELSE

				WRITE(FNu,200) 'step',FEMCOUNT
				WRITE(FNu,210) Z,X
				WRITE(FNu,220) Z,Y,Y
				WRITE(FNu,230) 'VX'
				WRITE(FNu,240) 'VY'
				WRITE(FNu,250) (N,VX1(N),VY1(N),N=1,NPSB)
	
			200 FORMAT(A4,I0)
			210 FORMAT(I0,I2)
			220 FORMAT(I0,I2,I2)
			230 FORMAT(A2)
			240 FORMAT(A2)
			250 FORMAT(I0,2E14.7E2)		

		END IF

      RETURN
      END


!*********************************
!*  Display Information          *
!*  Last Modified : AUG 05,2000  *
!*********************************

      SUBROUTINE INFO(NESB,NPSB,DT,TIME,TEND,ONAME,CMNT)
	  USE PARAMETERS
      IMPLICIT NONE

      INTEGER NESB,NPSB
      DOUBLE PRECISION DT,TIME,TEND
      CHARACTER ONAME*20,CMNT*25

      WRITE(*,50)
      WRITE(*,100) NPSB,NESB
      WRITE(*,110) TIME,TEND,DT
      WRITE(*,60)
      
      
      WRITE(*,220) F0
	  WRITE(*,230) F1
	  WRITE(*,240) G0
	  
	  WRITE(*,260) lambda
	  WRITE(*,270) K0
	  WRITE(*,280) DENS
      WRITE(*,300) CMNT
      WRITE(*,310) ONAME

   50 FORMAT(' '/'*** Condition for Calculation ***'/)
   60 FORMAT(' ','*** Test Fluid ***'/)
  100 FORMAT(' ',I4,'nodes, ',I4,'element'/)
  110 FORMAT(' ','Start Time:',E15.7, ', Final Time:',E15.7/,' ','Incriment :',E15.7/)
  
 
  220 FORMAT(' ','FLUIDITY ZERO S-R: ',F10.3)
  230 FORMAT(' ','FLUIDITY HIGH S-R: ',F10.3)
  240 FORMAT(' ','INSTANTANEOUS RELAXATION MODULUS: ',F10.3)
  
  260 FORMAT(' ','STRUCTURAL RELAXATION TIME: ',F10.3)
  270 FORMAT(' ','KINETIC CONSTANT: ',F10.3)
  280 FORMAT(' ','DENSITY: ',F10.3,'kg/m^3') 
  300 FORMAT(' ','Comment: ',A)
  310 FORMAT(' ','Output File: ',A//)

      RETURN
      END


!*********************************
!*  Convergence Check            *
!*  Last Modified : NOV 11,1999  *
!*********************************


      SUBROUTINE CONV(RESSUB,NPSUB,VMEANSUB)
    
      use parameters
	  
	  IMPLICIT NONE
      
	  INTEGER I,NPSUB 
      DOUBLE PRECISION RESSUB,TMP,V0,V1,VMEANSUB

      RESSUB = 0.0
      DO 10 I=1,NPSUB
        V0 = SQRT(VX0(I)**2 + VY0(I)**2)
        V1 = SQRT(VX1(I)**2 + VY1(I)**2)
        TMP = DABS(V1-V0)/VMEANSUB
        RESSUB = MAX(RESSUB,TMP)
   10 CONTINUE

      RETURN
      END


!*********************************
!*  Calculate Matrices           *
!*  Last Modified : AUG 9,1999   *
!*********************************

      SUBROUTINE MKMTR(ELEM)
    
      use parameters 

  IMPLICIT NONE
      INTEGER I,J,K,N,N1,N2,N3
	  INTEGER ELEM
      DOUBLE PRECISION AREA,AREA02,AREA3,AREA12,A2
      DOUBLE PRECISION B(3),C(3),DD(3,3)
      DOUBLE PRECISION X1,X2,X3,Y1,Y2,Y3
  
!*  Initialization  *
      DO 10 I=1,3
        EMM(ELEM,I) = 0.D0
        DO 20 J=1,3
          EHX(ELEM,I,J) = 0.D0
          EHY(ELEM,I,J) = 0.D0
          ESS(ELEM,I,J) = 0.D0
          DO 30 K=1,3
            EKX(ELEM,I,J,K) = 0.D0
            EKY(ELEM,I,J,K) = 0.D0
   30     CONTINUE
   20   CONTINUE
   10 CONTINUE

      DD(1,1) = 2.0D0
      DD(1,2) = 1.0D0
      DD(1,3) = 1.0D0

      DD(2,1) = 1.0D0
      DD(2,2) = 2.0D0
      DD(2,3) = 1.0D0

      DD(3,1) = 1.0D0
      DD(3,2) = 1.0D0
      DD(3,3) = 2.0D0

!*  Calculate Area of Element  *
!*     n1 -- number of 1st node
!*     n2 -- number of 2nd node
!*     n3 -- number of 3rd node
!*     area -- area of element

      N1 = NOP(ELEM,1)
      N2 = NOP(ELEM,2)
      N3 = NOP(ELEM,3)

      X1 = CORD(N1,1)
      Y1 = CORD(N1,2)

      X2 = CORD(N2,1)
      Y2 = CORD(N2,2)

      X3 = CORD(N3,1)
      Y3 = CORD(N3,2)

      AREA02 = X1*(Y2-Y3) + X2*(Y3-Y1) + X3*(Y1-Y2)
      AREA = 0.5D0*AREA02

      IF (AREA.LE.0.D0) THEN
        WRITE(*,*) 'ERROR: Area is less than zero (',ELEM, ')'
        STOP
      END IF

      A2      = 1.0D0 / AREA02
      AREA3  = AREA / 3.0D0
      AREA12 = AREA / 12.0D0

!*  Differential of Shape Function  *
      B(1) = (Y2-Y3) * A2
      B(2) = (Y3-Y1) * A2
      B(3) = (Y1-Y2) * A2
      C(1) = (X3-X2) * A2
      C(2) = (X1-X3) * A2
      C(3) = (X2-X1) * A2

!C
      AR(ELEM) = AREA
      EB(ELEM,1) = B(1)
      EB(ELEM,2) = B(2)
      EB(ELEM,3) = B(3)
      EC(ELEM,1) = C(1)
      EC(ELEM,2) = C(2)
      EC(ELEM,3) = C(3)
!C

!*  Calculate Matrices  *
!*     [Hx], [Hy]

      DO 100 I=1,3
        DO 110 J=1,3
          EHX(ELEM,I,J) = AREA3 * B(J)
          EHY(ELEM,I,J) = AREA3 * C(J)
  110   CONTINUE
  100 CONTINUE

!*     [Kxx], [Kyy]

      DO 200 I=1,3
        DO 210 J=1,3
          DO 220 K=1,3
            EKX(ELEM,I,J,K) = AREA12*DD(I,J)*B(K)
            EKY(ELEM,I,J,K) = AREA12*DD(I,J)*C(K)
  220     CONTINUE
  210   CONTINUE
  200 CONTINUE

!*      [S]

       DO 300 I=1,3
         DO 310 J=1,3
           ESS(ELEM,I,J) = AREA*(B(I)*B(J)+C(I)*C(J))
  310    CONTINUE
  300  CONTINUE

!*       _
!*      [M] (lumped mass matrix)
!*
       DO 400 I=1,3
         EMM(ELEM,I) = AREA3
         N = NOP(ELEM,I)
         LMM(N) = LMM(N) + AREA3
  400  CONTINUE
!*
       RETURN
       END


!*********************************
!*  Step 1                       *
!*  Last Modified : AUG 05,2000  *
!*********************************

      SUBROUTINE STEP1(DT)
   
	  use parameters

	  IMPLICIT NONE
      
      INTEGER I,N,N_F 
      DOUBLE PRECISION C1,DT,DDT
      

!*  Step 1(a)  *
!  Calculate Velocity  *
      C1 = 0.5D0*DT/DENS
      DDT = 0.5D0*DT

!*  Calculate R.H.S. Vector (U)
      CALL RVVX()
!*  Calculate R.H.S. Vector (V)
      CALL RVVY()

!*  B.C. (u)  *
      DO 100 I=1,NBC1
        N = NNBC1(I)
        VX0(N) = VBC1(I)
  100 CONTINUE

!*  Explicit Method
      DO 10 I=1,NP
        VX1(I)  = VX0(I) + C1*VVX(I)*ILMM(I)
   10 CONTINUE

!*  B.C. (v)  *
      DO 110 I=1,NBC2
        N = NNBC2(I)
        VY0(N) = VBC2(I)
  110 CONTINUE

!*  Explicit Method
      DO 20 I=1,NP
        VY1(I)  = VY0(I) + C1*VVY(I)*ILMM(I)
   20 CONTINUE

!* Calculate Stress (MBM model) *
	
	CALL RHSV_FLUID(DT)
	
	DO I=1,NP
		PHI1(I)=PHI0(I)+DDT*VPHI(I)*ILMM(I)
		END DO
	
!* B.C. (FLUIDITY)
	DO I=1,NBCF
		N=NNBCF(I)
		PHI1(N) = VBCF(I)
		END DO

	CALL RHSV_T(DT)
	DO I=1,NP
		TXX1(I) = TXX0(I)+DDT*VTXX(I)*ILMM(I)
		TXY1(I) = TXY0(I)+DDT*VTXY(I)*ILMM(I)
		TYY1(I) = TYY0(I)+DDT*VTYY(I)*ILMM(I)
	END DO

!* B.C. (Tij)
	DO I=1,NBC4
	N = NNBC4(I)
	TXX1(N) = VBC4(I)
	END DO

	DO I=1,NBC5
	N = NNBC5(I)
	TXY1(N) = VBC5(I)
	END DO
	
	DO I=1,NBC6
	N = NNBC6(I)
	TYY1(N) = VBC6(I)
	END DO




!*  Step 1(b)  *
!*  cut here 10/11/12  *
!* ADDED HERE 10/11/12 *
    C1 = 0.5D0*DT/DENS
      DDT = 0.5D0*DT

!*  Calculate R.H.S. Vector (U)
      CALL RVVX()
!*  Calculate R.H.S. Vector (V)
      CALL RVVY()

!*  B.C. (u)  *
      DO I=1,NBC1
        N = NNBC1(I)
        VX0(N) = VBC1(I)
  END DO

!*  Explicit Method
      DO  I=1,NP
        VX1(I)  = VX0(I) + C1*VVX(I)*ILMM(I)
   END DO

!*  B.C. (v)  *
      DO I=1,NBC2
        N = NNBC2(I)
        VY0(N) = VBC2(I)
  END DO

!*  Explicit Method
      DO  I=1,NP
        VY1(I)  = VY0(I) + C1*VVY(I)*ILMM(I)
   END DO

!* Calculate Stress (MBM model) *
	
	CALL RHSV_FLUID(DT)
	
	DO I=1,NP
		PHI1(I)=PHI0(I)+DDT*VPHI(I)*ILMM(I)
		END DO
	
!* B.C. (FLUIDITY)
	DO I=1,NBCF
		N=NNBCF(I)
		PHI1(N) = VBCF(I)
		END DO

	CALL RHSV_T(DT)
	DO I=1,NP
		TXX1(I) = TXX0(I)+DDT*VTXX(I)*ILMM(I)
		TXY1(I) = TXY0(I)+DDT*VTXY(I)*ILMM(I)
		TYY1(I) = TYY0(I)+DDT*VTYY(I)*ILMM(I)
	END DO

!* B.C. (Tij)
	DO I=1,NBC4
	N = NNBC4(I)
	TXX1(N) = VBC4(I)
	END DO

	DO I=1,NBC5
	N = NNBC5(I)
	TXY1(N) = VBC5(I)
	END DO
	
	DO I=1,NBC6
	N = NNBC6(I)
	TYY1(N) = VBC6(I)
	END DO
	RETURN
	END

!************************************
!*  Step 2: Pressure (Poisson Eq.)  *
!*  Last Modified : AUG 19,1999     *
!************************************

      SUBROUTINE STEP2(DT)
  

      use parameters 
	  IMPLICIT NONE
      DOUBLE PRECISION DT
      INTEGER I 

    
!**********************************************
!*  CG Method Routine                         *
!*     EPS : Condition for Convergence Check  *
!*     LMAX: Maximum Number of Iteration      *
!*     XX  : Solution                         *
!**********************************************

!C     LMAX = 1000
      CALL CGPOIS(DT)

!C  Update Pressure
      DO 20 I=1,NP
        PR1(I) = XX(I)
   20 CONTINUE

      RETURN
      END


!***********************************
!*  Step 3: Velocity Correction    *
!*  Last Modified : AUG 05, 2000   *
!***********************************

      SUBROUTINE STEP3(DT)
     
      use parameters
		
 IMPLICIT NONE

      INTEGER I,J,N,N1,N2 
      DOUBLE PRECISION C1,DT

	  C1 = 1.D0 / DENS

!*  Initialization  *
      DO 10 I=1,NP
        VVX(I) = 0.D0
        VVY(I) = 0.D0
   10 CONTINUE

!*  Calculate Vector  *
      DO 100 N=1,NE
        DO 110 I=1,3
          N1 = NOP(N,I)
          DO 120 J=1,3
            N2 = NOP(N,J)
            VVX(N1) = VVX(N1) + EHX(N,I,J)*PR1(N2)*C1
            VVY(N1) = VVY(N1) + EHY(N,I,J)*PR1(N2)*C1
  120     CONTINUE
  110   CONTINUE
  100 CONTINUE

      DO 300 I=1,NP
        VX1(I) = VX1(I) - DT*VVX(I)*ILMM(I)
        VY1(I) = VY1(I) - DT*VVY(I)*ILMM(I)
  300 CONTINUE

!*  Boundary Conditions  *
      DO 200 I=1,NBC1
        VX1(NNBC1(I)) = VBC1(I)
  200 CONTINUE

      DO 210 I=1,NBC2
        VY1(NNBC2(I)) = VBC2(I)
  210 CONTINUE

      RETURN
      END

!************************************************
!*  Calculate R.H.S. Vector for Eq. Motion (u)  *
!*  Step 1                                      *
!*  Last Modified : NOV 12, 2010                *
!************************************************

!**********************************************************
!*  FOR MBM MODEL. USE Tij from Subroutine RHSV_FLUID(DT) *
!*  Last Modified : NOV 12, 2010                          *
!**********************************************************


      SUBROUTINE RVVX()
 

      use parameters
				
     IMPLICIT NONE      
      INTEGER I,J,K,N,N1,N2,N3
  
      DOUBLE PRECISION KK,II,REI
      DOUBLE PRECISION DUDX,DVDY,DUYVX


!*  Initialization
      DO 500 I=1,NP
        VVX(I) = 0.D0
  500 CONTINUE

      
!*  Calculate R.H.S. Vector
    DO N=1,NE
		DO I=1,3
		N1=NOP(N,I)
			DO J=1,3
				N2 = NOP(N,J)
				VVX(N1)=VVX(N1)+(EHX(N,I,J)*TXX1(N2)&
								+EHY(N,I,J)*TXY1(N2))
								!*have to add something?
				
				DO K=1,3
					N3=NOP(N,K)
					VVX(N1)=VVX(N1)-DENS*(EKX(N,I,J,K)*VX1(N2)*VX1(N3)&
										 +EKY(N,I,J,K)*VY1(N2)*VX1(N3))
				END DO
			END DO
		END DO
	END DO





!*  B.C.  *
      DO 100 I=1,NBC1
        VVX(NNBC1(I)) = 0.D0
  100 CONTINUE

      RETURN
      END

!************************************************
!*  Calculate R.H.S. Vector for Eq. Motion (v)  *
!*  Step 1                                      *
!*  Last Modified : NOV 12, 2010                *
!************************************************

!**************************************************************
!*	FOR i.THE MODEL. USE Tij from Subroutine RHSV_FLUID(DT)   *
!*  Last Modified : NOV 12, 2010                              *
!**************************************************************

      SUBROUTINE RVVY()


      use parameters  
      IMPLICIT NONE
      INTEGER I,J,K,N,N1,N2,N3

      DOUBLE PRECISION KK,II,REI
      DOUBLE PRECISION DUDX,DVDY,DUYVX



!*  Initialization
      DO 500 I=1,NP
        VVY(I) = 0.D0
  500 CONTINUE

      
!*  Calculate R.H.S. Vector
     DO N=1,NE
		DO I=1,3
		N1=NOP(N,I)
			DO J=1,3
				N2 = NOP(N,J)
				VVY(N1)=VVY(N1)+(EHX(N,I,J)*TXY1(N2)&
							   +EHY(N,I,J)*TYY1(N2))
							   !*have to add something?
				
				DO K=1,3
					N3=NOP(N,K)
					VVY(N1)=VVY(N1)-DENS*(EKX(N,I,J,K)*VX1(N2)*VY1(N3)&
										 +EKY(N,I,J,K)*VY1(N2)*VY1(N3))
				END DO
			END DO
		END DO
	END DO

!*  B.C.  *
      DO 100 I=1,NBC2
        VVY(NNBC2(I)) = 0.D0
  100 CONTINUE

      RETURN
      END



!* imitation of p.14 *

!************************************************
!*  Calculate R.H.S. Vector for MBM Model       *
!*  Used to Calculate stress                    *
!*  Step 1a                                     *
!*  Last Modified : NOV 05, 2010                *
!*  Added		  : OCT 25, 2010        *
!************************************************
	subroutine RHSV_T(DT)
	use parameters
	implicit none

	integer i,J,K,N,N1,N2,N3
	DOUBLE PRECISION C1,C2,C3,GG,DT
	DOUBLE PRECISION AREA,AREA02,DX(3),DY(3)
	DOUBLE PRECISION FF
	DOUBLE PRECISION M,MMM,M5,M6
	DOUBLE PRECISION TT,X1,X2,X3,Y1,Y2,Y3

	!* Initialization *
	DO I=1,NP
		VTXX(I) = 0.D0
		VTXY(I) = 0.D0
		VTYY(I) = 0.D0
		END DO

	!* Calculate Vector *
	DO N=1,NE
	!* Calculate Area, Dx,Dy *
	N1 = NOP(N,1)
	N2 = NOP(N,2)
	N3 = NOP(N,3)
	
	X1 = CORD(N1,1)
	Y1 = CORD(N1,2)
	X2 = CORD(N2,1)
	Y2 = CORD(N2,2)
	X3 = CORD(N3,1)
	Y3 = CORD(N3,2)

	DX(1) = X3 -X2
	DX(2) = X1 -X3
	DX(3) = X2 -X1
	DY(1) = Y2 -Y3
	DY(2) = Y3 -Y1
	DY(3) = Y1 -Y2

	AREA02 = X1*DY(1)+X2*DY(2)+X3*DY(3)
	AREA = 0.5D0*AREA02

	FF = (PHI1(N1)+PHI1(N2)+PHI1(N3))/3.D0
	C1 = 2.D0*G0
	C3 = G0*FF

	DO I=1,3
		N1 = NOP(N,I)

	!* SUPG
		TT = 0.5D0*DT
		M = VX1(N1)*DY(I)+VY1(N1)*DX(I)
		MMM = TT*M/AREA/12.D0

		VTXX(N1) = VTXX(N1)-C3*EMM(N,I)*TXX1(N1)
		VTXY(N1) = VTXY(N1)-C3*EMM(N,I)*TXY1(N1)
		VTYY(N1) = VTYY(N1)-C3*EMM(N,I)*TYY1(N1)

		DO J = 1,3
			VTXX(N1) = VTXX(N1) + C1*EHX(N,I,J)*VX1(N2)
			VTXY(N1) = VTXY(N1) + G0*(EHY(N,I,J)*VX1(N2)+EHX(N,I,J)*VY1(N2))
			VTYY(N1) = VTYY(N1) + C1*EHY(N,I,J)*VY1(N2)

		
            DO K=1,3
              M5 = MMM*DY(K)
              M6 = MMM*DX(K)
              N3 = NOP(N,K)

              VTXX(N1) = VTXX(N1) - (EKX(N,I,J,K)+M5)*VX1(N2)*TXX1(N3)&
								  - (EKY(N,I,J,K)+M6)*VY1(N2)*TXX1(N3)&
								  + 2.D0*EKX(N,I,K,J)*VX1(N2)*TXX1(N3)&
								  + 2.D0*EKY(N,I,K,J)*VX1(N2)*TXY1(N3)

			  VTXY(N1) = VTXY(N1) - (EKX(N,I,J,K)+M5)*VX1(N2)*TXY1(N3)&
								  - (EKY(N,I,J,K)+M6)*VY1(N2)*TXY1(N3)&
								  + EKX(N,I,K,J)*VY1(N2)*TXX1(N3)&
								  + EKY(N,I,K,J)*VX1(N2)*TYY1(N3)

			  VTYY(N1) = VTYY(N1) - (EKX(N,I,J,K)+M5)*VX1(N2)*TYY1(N3)&
								  - (EKY(N,I,J,K)+M6)*VY1(N2)*TYY1(N3)&
								  + 2.D0*EKX(N,I,K,J)*VY1(N2)*TXY1(N3)&
								  + 2.D0*EKY(N,I,K,J)*VY1(N2)*TYY1(N3)
	
            END DO
          END DO
        END DO
      END DO

      RETURN
      END

!*********************************************************
!*  Calculate R.H.S. Vector for Bautista Model>>Fluidity *
!*  Step 1a                                              *
!*  Last Modified : NOV 05, 2010                         *
!*  Added		  : OCT 25, 2010                 *
!*********************************************************
subroutine RHSV_FLUID(DT)
use parameters
implicit none

integer I,J,K,N
integer N1,N2,N3
DOUBLE PRECISION AREA,AREA02,DX(3),DY(3),B(3),C(3)
double precision DUDX1,DUDY1,DVDX1,DVDY1
DOUBLE PRECISION X1,X2,X3,Y1,Y2,Y3
DOUBLE PRECISION C1,C2
DOUBLE PRECISION FF
DOUBLE PRECISION TT,M,MMM
double precision DT

!* initialization *
	do i=1,NP
	VPHI(I)=0.d0
	end do
	
!* Calculate Vector *
	do N=1,NE

	!* Calculate Area, Dx, Dy
	N1=NOP(N,1)
	N2=NOP(N,2)
	N3=NOP(N,3)

	X1=NOP(N1,1)
	Y1=NOP(N1,2)
	X2=NOP(N2,1)
	Y2=NOP(N2,2)
	X3=NOP(N3,1)
	Y3=NOP(N3,2)

	DX(1) = X3-X2
	DX(2) = X1-X3
	DX(3) = X2-X1
	DY(1) = Y2-Y3
	DY(2) = Y3-Y1
	DY(3) = Y1-Y2

	AREA02=X1*DY(1)+X2*DY(2)+X3*DY(3)
	AREA = 0.5D0*AREA02

	B(1) = DY(1) * AREA02
	B(2) = DY(2) * AREA02
	B(3) = DY(3) * AREA02
	
	C(1) = DX(1) * AREA02
	C(2) = DX(2) * AREA02
	C(3) = DX(3) * AREA02

	FF = (PHI1(N1)+PHI1(N2)+PHI(N3))/3.D0
	C1 = (F0-FF)/LAMBDA
	C2 = K0*(F1-FF)
	
	DO I=1,3
		N1 = NOP(N,I)
!* HERE WRONG? 10/11/05
!* SUPG
	TT = 0.5D0*DT
	M = VX1(N1)*DY(I)+VY1(N1)*DX(I)
	MMM = TT*M/AREA/12.D0

	VPHI(N1) = VPHI(N1)+C1*EMM(N,I)
	VPHI(N1) = VPHI(N1)+C1*EMM(N,I)
	VPHI(N1) = VPHI(N1)+C1*EMM(N,I)

	DO J=1,3
		N2=NOP(N,J)
		DO K  =1,3
		VPHI(N1) = VPHI(N1)+C2*(EKX(N,I,J,K)*VX1(N3)*TXX1(N2)&
							   +EKY(N,I,J,K)*VX1(N3)*TXY1(N2)&
							   +EKX(N,I,J,K)*VY1(N3)*TXY1(N2)&
							   +EKY(N,I,J,K)*VY1(N3)*TYY1(N2)&
							   ) 
				END DO
			END DO
		END DO
	END DO

	RETURN
	END

!*********************************
!*  CG Method                    *
!*  Last Modified : AUG 19,1999  *
!*********************************

      SUBROUTINE CGPOIS(DT)


      use parameters
      IMPLICIT NONE

      INTEGER I,J,K,N,N1,N2,ICOUNT,KEND

      DOUBLE PRECISION ALPHA,BETA,DELTA,EPS,EPS1,EPS2
      DOUBLE PRECISION B2,DT,RUR0,RUR1,PAP,RES2

      DOUBLE PRECISION R(NMAX),P(NMAX)
      DOUBLE PRECISION AP(NMAX),B(NMAX)

!C     EPS1 = 1.D-20
      EPS1 = 1.D-04
      EPS2 = EPS1*EPS1
      KEND=1000
      DELTA=-1.D0/DT

!*  Initialization  *
      DO 100 I=1,NP
         R(I)  = 0.D0
         B(I)  = 0.D0
         XX(I) = 0.D0
  100 CONTINUE

!*     r0 = b-Ax0 (x0=0)
      DO 110 N=1,NE
        DO 120 I=1,3
          N1 = NOP(N,I)
          DO 130 J=1,3
            N2 = NOP(N,J)
            B(N1) = B(N1)+DELTA*(EHX(N,I,J)*VX1(N2)+EHY(N,I,J)*VY1(N2))
  130     CONTINUE
  120   CONTINUE
  110 CONTINUE

!  NATURAL B.C.  *
      DO 600 I=1,NBCN
        N1 = NNBCN(I,1)
        N2 = NNBCN(I,2)
        B(N1) = B(N1) + 0.5D0*VBCN(I)
        B(N2) = B(N2) + 0.5D0*VBCN(I)
  600 CONTINUE

!*  B.C. (DP=0)  *
      DO 700 I=1,NBC3
        B(NNBC3(I)) = 0.D0
  700 CONTINUE

!*     p0=r0

      DO 510 I=1,NP
        R(I) = B(I)
        P(I) = B(I)
  510 CONTINUE

      B2 = 0.0
      DO 530 I=1,NP
        B2 = B2 + B(I)**2
  530 CONTINUE
 
      IF(B2 .LT. EPS2) THEN
        EPS = 0.D0
        ICOUNT = 1
        GOTO 999
      END IF

!*     Iterative Loop

      ICOUNT = 0
      DO 10 K=1,KEND
        ICOUNT = ICOUNT + 1

        DO 300 I=1,NP
          AP(I) = 0.D0
  300   CONTINUE

!*     AP : Apk      P: pk
!*     PAP: (pk,Apk) 

        DO 310 N=1,NE
          DO 320 I=1,3
            N1 = NOP(N,I)
            DO 330 J=1,3
              N2 = NOP(N,J)
              AP(N1) = AP(N1) + ESS(N,I,J)*P(N2)
  330       CONTINUE
  320     CONTINUE
  310   CONTINUE

!*  B.C. (DP=0)  *
      DO 800 I=1,NBC3
        AP(NNBC3(I)) = 0.D0
  800 CONTINUE


        RUR0 = 0.D0
        DO 400 I=1,NP
          RUR0 = RUR0 + P(I)*R(I)
  400   CONTINUE

        PAP=0.D0
        DO 540 I=1,NP
          PAP = PAP + P(I)*AP(I)
  540   CONTINUE

        IF (PAP .EQ. 0.0) THEN
          ALPHA = 0.D0
        ELSE
          ALPHA = RUR0/PAP
        END IF

        DO 550 I=1,NP
           XX(I) = XX(I) + ALPHA*P(I)
           R(I)  = R(I)  - ALPHA*AP(I)
  550   CONTINUE

!*  Boundary Condition  *
!*        DO 410 I=1,NBC3
!*           XX(NNBC3(I)) = 0.D0
!*            R(NNBC3(I)) = 0.D0
!*  410   CONTINUE

        RUR1=0.D0
        RES2=0.D0
        DO 560 I=1,NP
          RUR1 = RUR1 + R(I)*AP(I)
          RES2 = RES2 + R(I)**2
  560   CONTINUE

        EPS = RES2/B2
        IF(EPS .LE. EPS2)  THEN
          GO TO 999
        END IF

!*  NOT CONVERGED  *
        BETA = -RUR1/PAP
        DO 570 I=1,NP

!*     p(k+1) = r(k+1)+beta*p(k)

          P(I) = R(I) + BETA*P(I)

  570   CONTINUE

   10 CONTINUE

  999 KEND = ICOUNT
      RETURN
      END


!**********************************
!*  Update Results                *
!*  Last Modified : OCT 10, 2010  *
!**********************************

      SUBROUTINE UPDATE(NPSUB)



      use parameters


      IMPLICIT NONE
      INTEGER I,NPSUB 

      DO 10 I=1,NPSUB
        VX0(I) = VX1(I)
        VY0(I) = VY1(I)
        PR0(I) = PR1(I)
   10 CONTINUE

      RETURN
      END

!**********************************
!*  Update Results per step       *
!*  Last Modified : OCT 10, 2010  *
!**********************************

      SUBROUTINE UPDATE_STEP(NESB,NPSB)

!REWRITE NP TO NPSUB

      use parameters


      IMPLICIT NONE
      INTEGER I,NESB,NPSB     


      DO  I=1,NPSB
        VX0(I) = VX1(I)
        VY0(I) = VY1(I)
        PR0(I) = PR1(I)
   END DO

	  RETURN
      END




!****************************************
!*   HISTORY                            *
!*                                      *
!*   October ?, 2010: coding was begun  *
!*   November 15, 2010: ver.2.00        *
!****************************************